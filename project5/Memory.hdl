// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/Memory.hdl
/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load=1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid and reads 0. Access to any address
 * in the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the Screen
 * and Keyboard chip specifications given in the lectures and the book.
 */
CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    // If invalid, set load to 0
    // Invalid if input > 0x6000
    And(a=address[13] , b=address[14] , out=startsWithOneOne );
    Or8Way(in=address[0..7] , out=hasOnesLower );
    Or8Way(in=address[5..12] , out=hasOnesHigher );
    Or(a=hasOnesLower , b=hasOnesHigher , out=endsWithOnes );
    And(a=startsWithOneOne , b=endsWithOnes , out=isInvalid );
    Mux(a=load , b=false , sel=isInvalid , out=loadAndValid );
    
    DMux4Way(in=loadAndValid , sel=address[13..14] , a=loadram0 , b=loadram1 , c=loadscreen , d=loadkeyboard );
    Or(a=loadram0 , b=loadram1 , out=loadram );

    RAM16K(in=in , load=loadram , address=address[0..13] , out=outram );
    Screen(in=in , load=loadscreen , address=address[0..12] , out=outscreen );
    Keyboard(out=outkeyboard );

    Mux4Way16(a=outram , b=outram , c=outscreen , d=outkeyboard , sel=address[13..14] , out=outifvalid );
    Mux16(a=outifvalid , b=false , sel=isInvalid , out=out );

}

